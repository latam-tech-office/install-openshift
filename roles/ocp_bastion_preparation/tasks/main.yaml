- name: "Loading SSH KEY from localhost (if any)"
  set_fact: ssh_key="{{ lookup('file','{{ admin_ssh_publickey }}') }}"
  when: admin_ssh_publickey is defined and admin_ssh_publickey is not none
  tags: [ ocp, prepare_bastion ]

- name: "Copy a SSH Key (if does exist)"
  lineinfile: dest=/root/.ssh/authorized_keys state=present create=yes line="{{ ssh_key }}"
  when: ssh_key is defined
  tags: [ ocp, prepare_bastion ]

- name: "Generate keys to be copied to whole cluster"
  command: "ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N \"\""
  tags: [ ocp, prepare_bastion ]

- name: "Read the content of this key"
  slurp: src=/root/.ssh/id_rsa.pub
  register: content_encoded
  tags: [ ocp, prepare_bastion, read_bastion_key ]

- name: "Reading Public Key generated. It's going to be copied to the entire cluster"
  set_fact: bastion_ssh_key="{{ content_encoded.content | b64decode }}"
  tags: [ ocp, prepare_bastion, read_bastion_key ]

- name: "Generating script to perform all necessary OpenShift installations"
  template: src={{ item }}.j2 dest=/root/{{ item }} mode=a+x force=True
  with_items: 
      - install_openshift.sh
  tags: [ ocp, prepare_bastion ]

- name: "Installing OpenShift Utils and other packages"
  yum: name="{{ item }}" state=latest
  with_items: "{{ bastion_packages }}"
  tags: [ ocp, prepare_bastion ]

- name: Define the final Inventory for installation
  template: src=ansible_hosts.j2 dest=/etc/ansible/hosts
  tags: [ ocp, prepare_bastion ]

- name: "Disable 'host_key_checking' in Ansible"
  lineinfile: dest=/etc/ansible/ansible.cfg regexp="host_key_checking" state=present line="host_key_checking = False"
  tags: [ ocp, prepare_bastion ]

- name: "Enable logging in Ansible"
  lineinfile: dest=/etc/ansible/ansible.cfg regexp="log_path" state=present line="log_path = /var/log/ansible.log"
  tags: [ ocp, prepare_bastion ]

- name: Create directory "postinstall"
  file: path=/root/postinstall/templates state=directory
  tags: [ ocp, prepare_bastion ]

- name: "Generating script to perform some post installations"
  template: src={{ item }}.j2 dest=/root/postinstall/{{ item }} mode=a+x force=True
  with_items:
      - install_eclipse_che.sh
      - install_bluegreen_canary.sh
  tags: [ ocp, prepare_bastion ]

- name: "Generate inventory for postinstalling"
  template: src=hosts_postinstall.j2 dest=/root/postinstall/hosts_postinstall force=True
  tags: [ ocp, prepare_bastion ]

- name: Download all the necessary playbooks for post install
  uri: url=https://raw.githubusercontent.com/latam-tech-office/install-openshift/master/ocp_postinstall/{{ item }}
       method=GET status_code=200 creates=True dest=/root/postinstall/{{ item }}
  with_items:
     - create_persistentvolumes.yaml
     - postinstall.yaml
     - templates/persistentvolume-gitlab-shell.yaml.j2
     - templates/persistentvolume.yaml.j2
     - reinstall-metrics.sh
  tags: [ ocp, prepare_bastion ]

#- name: Generating OpenShift PostInstall script
#  template: src=postinstall/post-openshift-install.sh.j2 dest=/root/postinstall/post-openshift-install.sh mode=a+x
#  tags: [ ocp, prepare_bastion ]

- name: (LOCAL) Generating a Local inventory for debug purposes
  local_action: template src=inventory_for_debug.j2 dest=inventory_for_debug
  tags: [ ocp, prepare_bastion ]
